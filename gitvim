#!/bin/bash

# Try to simplify the vim plugins usage as submodules
# Note: - Please tell me how doing things better especially on git commands

# TODO: Check for submodule update.
#       Allow user to temporarly disable plugin
#       Make plugin update sucking less bandwith

# usage:
#    From list :
#       gitvim -af list
#    Add repo from url:
#       gitvim -a git://some_repo_url/pouet.vim
#    Remove plugin as submodule :
#       gitvim -r bundle/dha_Plugin_here
# ... and so on : try `gitvim -h`


## colors in hex mode!
c="\x1b[0m"
c1="\x1b[0;34m"
c2="\x1b[1;32m"
c3="\x1b[1;31m"
c4="\x1b[0;36m"

# Define this according to your [pathogen](https://github.com/tpope/vim-pathogen) config :
BUNDLE_DIR="bundle"


function _getRepoName {
    # get repo name from repo url
    repoName=`echo "$1" | cut -d'/' -f5 | cut -d'.' -f1`

    echo $repoName
}

function _listRepo {
    grep url $HOME/.vim/.gitmodules | cut -d " " -f 3 | sort
}

function _listPlug {
    ls  $HOME/.vim/$BUNDLE_DIR/
}

function Add_FromUrl {
    repoName=`_getRepoName $1`
    cur_dir=`pwd`
    cd $HOME/.vim/

    #echo "$1" $BUNDLE_DIR/$repoName
    git submodule add "$1" $BUNDLE_DIR/$repoName
    git submodule init
    git submodule update
    git commit -m "Add $repoName as submodule"

    echo -e ":: Repo \`$repoName\` added as submodule\n"
    echo -e "\n:: Return to \`$cur_dir\` directory :"
    cd $cur_dir

}

function Add_FromFile {
    while read repoURL
    do
        Add_FromUrl
    done < $1

}

function Remove_Plugin {
    plug_path=$1
    cur_dir=`pwd`

    echo -e ":: Be sure to do \`git rebase HEAD\` and \`git commit\` before !\n=> <Ctrl+C> to abort, <Enter> to continue :"; read
    git rm --cached $plug_path && echo ":: Removed from $plug_path"
    git config -f .git/config --remove-section submodule.$plug_path && echo -e ":: Removed from \`.git/config\` file"
    git config -f .gitmodules --remove-section submodule.$plug_path && echo -e ":: Removed from \`.gitmodules\` file"

    if [ -d $plug_path ]; then
        echo -e ":: \`$plug_path\` seems exist, erase it !"
        rm -rf $plug_path
    fi

    git commit -m "$1 entry removed from repo"
    
    echo -e "\nDone."

    echo -e "\n:: Return to \`$cur_dir\` directory :"
    cd $cur_dir

}

function Replace_Plugin {
    plug_path=$1
    plug_url=$2

    echo -e ":: This command will erase \`$1\` and install \`$2\` ? (<Ctrl+C> to abort) :"; read
    echo -e ":: Removing \`$1\` :"
    Remove_Plugin $1
    echo -e ":: Cloning \`$2\` :"
    Add_FromUrl $2
}

function check_forUpdate {
    cur_dir=`pwd`
    cd $HOME/.vim/

    function _checkEach() {

        for i in "$@"; do
            check="Checking \`$i\`"
            cd $HOME/.vim/$BUNDLE_DIR/$i

            git remote update &>/dev/null
            rev_dist=`git rev-list --max-count=1 master`
            rev_local=`git rev-list --max-count=1 origin/master`

            if [ "$rev_dist" = "$rev_local" ]; then
                mess="Already up to date"
                col=${c4}
            else
                rev_merged=`git merge-base master origin/master`
                if [ "$rev_merged" = "$rev_dist" ]; then
                    col=${c1}
                    mess="Up to date with original repo"
                elif [ "$rev_merged" = "$rev_local" ]; then
                    col=${c1}
                    mess="Up to date with merged version"
                else
                   col=${c3}
                   mess="Need pull ! (Or branches diverged)" 
                fi
            fi
            
            echo -e "${check}..." "\e[40\`" "${col}${mess}${c}"
            
        done

    }

    _checkEach `ls $HOME/.vim/$BUNDLE_DIR`

    echo -e "\n:: Return to \`$cur_dir\` directory :"
    cd $cur_dir
}

function plugins_Update {
    cur_dir=`pwd`
    cd $HOME/.vim/

    if [ $1 ]; then
        cd $1 && git pull origin master
    else
        git submodule foreach git pull origin master
    fi

    echo -e "\n:: Return to \`$cur_dir\` directory :"
    cd $cur_dir
}

function make_File {
    file=$1
    if [ -e $file ]; then
        echo ":: The file \`$file\` already exist: creating a backup"
        newname=$file-`date +%Y%m%d@%H%M%s`
        cp $file $newname
        echo ":: \`$file\` saved as \`$newname\`"
    fi

    _listRepo > $file
    #git add $file
    echo -e ":: File \`$file\` created !"
}


function show_Help {

saveIFS=$IFS
IFS='\n' read -r -d '' mess << 'EOF'
Usage:  gitvim [option] [url | file | plugin directory]
        gitvim --replace directory url

		Manage vim plugins installed as submodules (with pathogen plugin).

Options :
   -a,  --add           Add a plugin from his Url repository.

  -af,  --add-fromfile  Add plugins from file list of repositories. This file
                        must contain repos list with one git url per line.

  -lr,  --list-repo     List all repositories used in .gitmodules.

  -lp,  --list-plugins  List all plugins intalled in `bundle` directory.

  -cu,  --check-update  Check for plugins update a return a list to stdin.

   -u,  --update        Update all plugins/submodules. With path as argument,
                        only this plugin/submodule is updated.
                            Ex: gitvim -u bundle/PIV

   -r,  --remove        Remove plugin/submodule directory and cleanup git
                        config files.

        --replace       Replace installed plugin with other one with his repo
                        url. In fact it doesn't replace nothing but erase the
                        first one and install the second.
                            Doing:
                         gitvim --replace bundle/oldPlug git://my.new.plug/here

                        ... is the same thing but shorter than:
                                gitvim -r bundle/oldPlug
                                gitvim -a git://my.new.plug/here

  -mf,  --make-file     Make file list of all current repositories used as
                        submodules. (use `.gitmodules`).
                            Ex: gitvim -mf path/to/myrepofile

   -h,  --help          This help.

EOF

echo "$mess"

IFS=$saveIFS

}

case $1 in
    "-a"|"--add")
        Add_FromUrl $2;
        ;;
    "-af"|"--add-fromfile")
        Add_FromFile $2;
        ;;
    "-lr"|"--list-repo")
        _listRepo
        ;;
    "-lp"|"--list-plugins")
        _listPlug
        ;;
    "-cu"|"--check-update")
        check_forUpdate $2
        ;;
    "-u"|"--update")
        plugins_Update $2;
        ;;
    "-r"|"--remove")
        Remove_Plugin $2;
        ;;
    "--replace")
        Replace_Plugin $2 $3;
        ;;
    "-mf"|"--make-file")
        if [ $2 ]; then
            make_File $2;
        else
            show_Help;
        fi
        ;;
    "-h"|"--help")
        show_Help;
        ;;
    *)
        echo -e ":: \`$1\` ? WTF ?\n:: Try this instead :\n"
        show_Help;
        ;;
esac

exit 0

