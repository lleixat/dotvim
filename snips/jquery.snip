snippet     add
prev_word   '^'
	${1:obj}.add('${2:selector expression}')${3}

snippet     addClass
prev_word   '^'
	${1:obj}.addClass('${2:class name}')${3}

snippet     after
prev_word   '^'
	${1:obj}.after('${2:Some text <b>and bold!</b>}')${3}

snippet     ajax
prev_word   '^'
	$.ajax({
		url: '${1:mydomain.com/url}',
		type: '${2:POST}',
		dataType: '${3:xml/html/script/json}',
		data: $.param( $('${4:Element or Expression}') ),
		complete: function (jqXHR, textStatus) {
			${5:// callback}
		},
		success: function (data, textStatus, jqXHR) {
			${6:// success callback}
		},
		error: function (jqXHR, textStatus, errorThrown) {
			${7:// error callback}
		}
	});

snippet     ajaxcomplete
prev_word   '^'
	${1:obj}.ajaxComplete(function (${1:e}, xhr, settings) {
		${2:// callback}
	});

snippet     ajaxerror
prev_word   '^'
	${1:obj}.ajaxError(function (${1:e}, xhr, settings, thrownError) {
		${2:// error callback}
	});
	${3}

snippet     ajaxget
prev_word   '^'
	$.get('${1:mydomain.com/url}',
		${2:{ param1: value1 },}
		function (data, textStatus, jqXHR) {
			${3:// success callback}
		}
	);

snippet     ajaxpost
prev_word   '^'
	$.post('${1:mydomain.com/url}',
		${2:{ param1: value1 },}
		function (data, textStatus, jqXHR) {
			${3:// success callback}
		}
	);

snippet     ajaxprefilter
prev_word   '^'
	$.ajaxPrefilter(function (${1:options}, ${2:originalOptions}, jqXHR) {
		${3: // Modify options, control originalOptions, store jqXHR, etc}
	});

snippet     ajaxsend
prev_word   '^'
	${1:obj}.ajaxSend(function (${1:request, settings}) {
		${2:// error callback}
	});
	${3}

snippet     ajaxsetup
prev_word   '^'
	$.ajaxSetup({
		url: "${1:mydomain.com/url}",
		type: "${2:POST}",
		dataType: "${3:xml/html/script/json}",
		data: $.param( $("${4:Element or Expression}") ),
		complete: function (jqXHR, textStatus) {
			${5:// callback}
		},
		success: function (data, textStatus, jqXHR) {
			${6:// success callback}
		},
		error: function (jqXHR, textStatus, errorThrown) {
			${7:// error callback}
		}
	});

snippet     ajaxstart
prev_word   '^'
	$.ajaxStart(function () {
		${1:// handler for when an AJAX call is started and no other AJAX calls are in progress};
	});
	${2}

snippet     ajaxstop
prev_word   '^'
	$.ajaxStop(function () {
		${1:// handler for when all AJAX calls have been completed};
	});
	${2}

snippet     ajaxsuccess
prev_word   '^'
	$.ajaxSuccess(function (${1:e}, xhr, settings) {
		${2:// handler for when any AJAX call is successfully completed};
	});
	${2}

snippet     andself
prev_word   '^'
	${1:obj}.andSelf()${2}

snippet     animate
prev_word   '^'
	${1:obj}.animate({${2:param1: value1, param2: value2}}, ${3:speed})${4}

snippet     append
prev_word   '^'
	${1:obj}.append('${2:Some text <b>and bold!</b>}')${3}

snippet     appendTo
prev_word   '^'
	${1:obj}.appendTo('${2:selector expression}')${3}

snippet     attr
prev_word   '^'
	${1:obj}.attr('${2:attribute}', '${3:value}')${4}

snippet     attrm
prev_word   '^'
	${1:obj}.attr({'${2:attr1}': '${3:value1}', '${4:attr2}': '${5:value2}'})${6}

snippet     before
prev_word   '^'
	${1:obj}.before('${2:Some text <b>and bold!</b>}')${3}

snippet     bind
prev_word   '^'
	${1:obj}.bind('${2:event name}', function (${3:e}) {
		${4:// event handler}
	});

snippet     blur
prev_word   '^'
	${1:obj}.blur(function (${2:e}) {
		${3:// event handler}
	});

snippet     C
prev_word   '^'
	$.Callbacks()${1}

snippet     Cadd
prev_word   '^'
	${1:callbacks}.add(${2:callbacks})${3}

snippet     Cdis
prev_word   '^'
	${1:callbacks}.disable()${2}

snippet     Cempty
prev_word   '^'
	${1:callbacks}.empty()${2}

snippet     Cfire
prev_word   '^'
	${1:callbacks}.fire(${2:args})${3}

snippet     Cfired
prev_word   '^'
	${1:callbacks}.fired()${2}

snippet     Cfirew
prev_word   '^'
	${1:callbacks}.fireWith(${2:this}, ${3:args})${4}

snippet     Chas
prev_word   '^'
	${1:callbacks}.has(${2:callback})${3}

snippet     Clock
prev_word   '^'
	${1:callbacks}.lock()${2}

snippet     Clocked
prev_word   '^'
	${1:callbacks}.locked()${2}

snippet     Crem
prev_word   '^'
	${1:callbacks}.remove(${2:callbacks})${3}

snippet     change
prev_word   '^'
	${1:obj}.change(function (${2:e}) {
		${3:// event handler}
	});

snippet     children
prev_word   '^'
	${1:obj}.children('${2:selector expression}')${3}

snippet     clearq
prev_word   '^'
	${1:obj}.clearQueue(${2:'queue name'})${3}

snippet     click
prev_word   '^'
	${1:obj}.click(function (${2:e}) {
		${3:// event handler}
	});

snippet     clone
prev_word   '^'
	${1:obj}.clone()${2}

snippet     contains
prev_word   '^'
	$.contains(${1:container}, ${2:contents});

snippet     css
prev_word   '^'
	${1:obj}.css('${2:attribute}', '${3:value}')${4}

snippet     csshooks
prev_word   '^'
	$.cssHooks['${1:CSS prop}'] = {
		get: function (elem, computed, extra) {
			${2: // handle getting the CSS property}
		},
		set: function (elem, value) {
			${3: // handle setting the CSS value}
		}
	};

snippet     cssm
prev_word   '^'
	${1:obj}.css({${2:attribute1}: '${3:value1}', ${4:attribute2}: '${5:value2}'})${6}

snippet     D
prev_word   '^'
	$.Deferred()${1}

snippet     Dalways
prev_word   '^'
	${1:deferred}.always(${2:callbacks})${3}

snippet     Ddone
prev_word   '^'
	${1:deferred}.done(${2:callbacks})${3}

snippet     Dfail
prev_word   '^'
	${1:deferred}.fail(${2:callbacks})${3}

snippet     Disrej
prev_word   '^'
	${1:deferred}.isRejected()${2}

snippet     Disres
prev_word   '^'
	${1:deferred}.isResolved()${2}

snippet     Dnotify
prev_word   '^'
	${1:deferred}.notify(${2:args})${3}

snippet     Dnotifyw
prev_word   '^'
	${1:deferred}.notifyWith(${2:this}, ${3:args})${4}

snippet     Dpipe
prev_word   '^'
	${1:deferred}.then(${2:doneFilter}, ${3:failFilter}, ${4:progressFilter})${5}

snippet     Dprog
prev_word   '^'
	${1:deferred}.progress(${2:callbacks})${3}

snippet     Dprom
prev_word   '^'
	${1:deferred}.promise(${2:target})${3}

snippet     Drej
prev_word   '^'
	${1:deferred}.reject(${2:args})${3}

snippet     Drejw
prev_word   '^'
	${1:deferred}.rejectWith(${2:this}, ${3:args})${4}

snippet     Dres
prev_word   '^'
	${1:deferred}.resolve(${2:args})${3}

snippet     Dresw
prev_word   '^'
	${1:deferred}.resolveWith(${2:this}, ${3:args})${4}

snippet     Dstate
prev_word   '^'
	${1:deferred}.state()${2}

snippet     Dthen
prev_word   '^'
	${1:deferred}.then(${2:doneCallbacks}, ${3:failCallbacks}, ${4:progressCallbacks})${5}

snippet     Dwhen
prev_word   '^'
	$.when(${1:deferreds})${2}

snippet     data
prev_word   '^'
	${1:obj}.data(${2:obj})${3}

snippet     dataa
prev_word   '^'
	$.data('${1:selector expression}', '${2:key}'${3:, 'value'})${4}

snippet     dblclick
prev_word   '^'
	${1:obj}.dblclick(function (${2:e}) {
		${3:// event handler}
	});

snippet     delay
prev_word   '^'
	${1:obj}.delay('${2:slow/400/fast}'${3:, 'queue name'})${4}

snippet     dele
prev_word   '^'
	${1:obj}.delegate('${2:selector expression}', '${3:event name}', function (${4:e}) {
		${5:// event handler}
	});

snippet     deq
prev_word   '^'
	${1:obj}.dequeue(${2:'queue name'})${3}

snippet     deqq
prev_word   '^'
	$.dequeue('${1:selector expression}'${2:, 'queue name'})${3}

snippet     detach
prev_word   '^'
	${1:obj}.detach('${2:selector expression}')${3}

snippet     die
prev_word   '^'
	${1:obj}.die(${2:event}, ${3:handler})${4}

snippet     each
prev_word   '^'
	${1:obj}.each(function (index) {
		${2:this.innerHTML = this + " is the element, " + index + " is the position";}
	});

snippet     el
prev_word   '^'
	$('<${1}/>'${2:, {}})${3}

snippet     eltrim
prev_word   '^'
	$.trim('${1:string}')${2}

snippet     empty
prev_word   '^'
	${1:obj}.empty()${2}

snippet     end
prev_word   '^'
	${1:obj}.end()${2}

snippet     eq
prev_word   '^'
	${1:obj}.eq(${2:element index})${3}

snippet     error
prev_word   '^'
	${1:obj}.error(function (${2:e}) {
		${3:// event handler}
	});

snippet     eventsmap
prev_word   '^'
	{
		:f${1}
	}

snippet     extend
prev_word   '^'
	$.extend(${1:true, }${2:target}, ${3:obj})${4}

snippet     fadein
prev_word   '^'
	${1:obj}.fadeIn('${2:slow/400/fast}')${3}

snippet     fadeinc
prev_word   '^'
	${1:obj}.fadeIn('slow/400/fast', function () {
		${2:// callback};
	});

snippet     fadeout
prev_word   '^'
	${1:obj}.fadeOut('${2:slow/400/fast}')${3}

snippet     fadeoutc
prev_word   '^'
	${1:obj}.fadeOut('slow/400/fast', function () {
		${2:// callback};
	});

snippet     fadeto
prev_word   '^'
	${1:obj}.fadeTo('${2:slow/400/fast}', ${3:0.5})${4}

snippet     fadetoc
prev_word   '^'
	${1:obj}.fadeTo('slow/400/fast', ${2:0.5}, function () {
		${3:// callback};
	});

snippet     filter
prev_word   '^'
	${1:obj}.filter('${2:selector expression}')${3}

snippet     filtert
prev_word   '^'
	${1:obj}.filter(function (${2:index}) {
		${3:// test code}
	})${4}

snippet     find
prev_word   '^'
	${1:obj}.find('${2:selector expression}')${3}

snippet     focus
prev_word   '^'
	${1:obj}.focus(function (${2:e}) {
		${3:// event handler}
	});

snippet     focusin
prev_word   '^'
	${1:obj}.focusIn(function (${2:e}) {
		${3:// event handler}
	});

snippet     focusout
prev_word   '^'
	${1:obj}.focusOut(function (${2:e}) {
		${3:// event handler}
	});

snippet     get
prev_word   '^'
	${1:obj}.get(${2:element index})${3}

snippet     getjson
prev_word   '^'
	$.getJSON('${1:mydomain.com/url}',
		${2:{ param1: value1 },}
		function (data, textStatus, jqXHR) {
			${3:// success callback}
		}
	);

snippet     getscript
prev_word   '^'
	$.getScript('${1:mydomain.com/url}', function (script, textStatus, jqXHR) {
		${2:// callback}
	});

snippet     grep
prev_word   '^'
	$.grep(${1:array}, function (item, index) {
		${2:// test code}
	}${3:, true});

snippet     hasc
prev_word   '^'
	${1:obj}.hasClass('${2:className}')${3}

snippet     hasd
prev_word   '^'
	$.hasData('${1:selector expression}');

snippet     height
prev_word   '^'
	${1:obj}.height(${2:integer})${3}

snippet     hide
prev_word   '^'
	${1:obj}.hide('${2:slow/400/fast}')${3}

snippet     hidec
prev_word   '^'
	${1:obj}.hide('${2:slow/400/fast}', function () {
		${3:// callback}
	});

snippet     hover
prev_word   '^'
	${1:obj}.hover(function (${2:e}) {
		${3:// event handler}
	}, function ($2) {
		${4:// event handler}
	});${5}

snippet     html
prev_word   '^'
	${1:obj}.html('${2:Some text <b>and bold!</b>}')${3}

snippet     inarr
prev_word   '^'
	$.inArray(${1:value}, ${2:array});

snippet     insa
prev_word   '^'
	${1:obj}.insertAfter('${2:selector expression}')${3}

snippet     insb
prev_word   '^'
	${1:obj}.insertBefore('${2:selector expression}')${3}

snippet     is
prev_word   '^'
	${1:obj}.is('${2:selector expression}')${3}

snippet     isarr
prev_word   '^'
	$.isArray(${1:obj})${2}

snippet     isempty
prev_word   '^'
	$.isEmptyObject(${1:obj})${2}

snippet     isfunc
prev_word   '^'
	$.isFunction(${1:obj})${2}

snippet     isnum
prev_word   '^'
	$.isNumeric(${1:value})${2}

snippet     isobj
prev_word   '^'
	$.isPlainObject(${1:obj})${2}

snippet     iswin
prev_word   '^'
	$.isWindow(${1:obj})${2}

snippet     isxml
prev_word   '^'
	$.isXMLDoc(${1:node})${2}

snippet     jj
prev_word   '^'
	$('${1:selector}')${2}

snippet     kdown
prev_word   '^'
	${1:obj}.keydown(function (${2:e}) {
		${3:// event handler}
	});

snippet     kpress
prev_word   '^'
	${1:obj}.keypress(function (${2:e}) {
		${3:// event handler}
	});

snippet     kup
prev_word   '^'
	${1:obj}.keyup(function (${2:e}) {
		${3:// event handler}
	});

snippet     last
prev_word   '^'
	${1:obj}.last('${1:selector expression}')${3}

snippet     live
prev_word   '^'
	${1:obj}.live('${2:events}', function (${3:e}) {
		${4:// event handler}
	});

snippet     load
prev_word   '^'
	${1:obj}.load(function (${2:e}) {
		${3:// event handler}
	});

snippet     loadf
prev_word   '^'
	${1:obj}.load('${2:mydomain.com/url}',
		${2:{ param1: value1 },}
		function (responseText, textStatus, xhr) {
			${3:// success callback}
		}
	});

snippet     makearray
prev_word   '^'
	$.makeArray(${1:obj});

snippet     map
prev_word   '^'
	${1:obj}.map(function (${2:index}, ${3:element}) {
		${4:// callback}
	});

snippet     mapp
prev_word   '^'
	$.map(${1:arrayOrObject}, function (${2:value}, ${3:indexOrKey}) {
		${4:// callback}
	});

snippet     merge
prev_word   '^'
	$.merge(${1:target}, ${2:original});

snippet     mdown
prev_word   '^'
	${1:obj}.mousedown(function (${2:e}) {
		${3:// event handler}
	});

snippet     menter
prev_word   '^'
	${1:obj}.mouseenter(function (${2:e}) {
		${3:// event handler}
	});

snippet     mleave
prev_word   '^'
	${1:obj}.mouseleave(function (${2:e}) {
		${3:// event handler}
	});

snippet     mmove
prev_word   '^'
	${1:obj}.mousemove(function (${2:e}) {
		${3:// event handler}
	});

snippet     mout
prev_word   '^'
	${1:obj}.mouseout(function (${2:e}) {
		${3:// event handler}
	});

snippet     mover
prev_word   '^'
	${1:obj}.mouseover(function (${2:e}) {
		${3:// event handler}
	});

snippet     mup
prev_word   '^'
	${1:obj}.mouseup(function (${2:e}) {
		${3:// event handler}
	});

snippet     next
prev_word   '^'
	${1:obj}.next('${2:selector expression}')${3}

snippet     nexta
prev_word   '^'
	${1:obj}.nextAll('${2:selector expression}')${3}

snippet     nextu
prev_word   '^'
	${1:obj}.nextUntil('${2:selector expression}'${3:, 'filter expression'})${4}

snippet     not
prev_word   '^'
	${1:obj}.not('${2:selector expression}')${3}

snippet     off
prev_word   '^'
	${1:obj}.off('${2:events}', '${3:selector expression}'${4:, handler})${5}

snippet     offset
prev_word   '^'
	${1:obj}.offset()${2}

snippet     offsetp
prev_word   '^'
	${1:obj}.offsetParent()${2}

snippet     on
prev_word   '^'
	${1:obj}.on('${2:events}', '${3:selector expression}', function (${4:e}) {
		${5:// event handler}
	});

snippet     one
prev_word   '^'
	${1:obj}.one('${2:event name}', function (${3:e}) {
		${4:// event handler}
	});

snippet     outerh
prev_word   '^'
	${1:obj}.outerHeight()${2}

snippet     outerw
prev_word   '^'
	${1:obj}.outerWidth()${2}

snippet     param
prev_word   '^'
	$.param(${1:obj})${2}

snippet     parent
prev_word   '^'
	${1:obj}.parent('${2:selector expression}')${3}

snippet     parents
prev_word   '^'
	${1:obj}.parents('${2:selector expression}')${3}

snippet     parentsu
prev_word   '^'
	${1:obj}.parentsUntil('${2:selector expression}'${3:, 'filter expression'})${4}

snippet     parsejson
prev_word   '^'
	$.parseJSON(${1:data})${2}

snippet     parsexml
prev_word   '^'
	$.parseXML(${1:data})${2}

snippet     pos
prev_word   '^'
	${1:obj}.position()${2}

snippet     prepend
prev_word   '^'
	${1:obj}.prepend('${2:Some text <b>and bold!</b>}')${3}

snippet     prependto
prev_word   '^'
	${1:obj}.prependTo('${2:selector expression}')${3}

snippet     prev
prev_word   '^'
	${1:obj}.prev('${2:selector expression}')${3}

snippet     preva
prev_word   '^'
	${1:obj}.prevAll('${2:selector expression}')${3}

snippet     prevu
prev_word   '^'
	${1:obj}.prevUntil('${2:selector expression}'${3:, 'filter expression'})${4}

snippet     promise
prev_word   '^'
	${1:obj}.promise(${2:'fx'}, ${3:target})${4}

snippet     prop
prev_word   '^'
	${1:obj}.prop('${2:property name}')${3}

snippet     proxy
prev_word   '^'
	$.proxy(${1:function}, ${2:this})${3}

snippet     pushstack
prev_word   '^'
	${1:obj}.pushStack(${2:elements})${3}

snippet     queue
prev_word   '^'
	${1:obj}.queue(${2:name}${3:, newQueue})${4}

snippet     queuee
prev_word   '^'
	$.queue(${1:element}${2:, name}${3:, newQueue})${4}

snippet     ready
prev_word   '^'
	$(function () {
		${1}
	});

snippet     rem
prev_word   '^'
	${1:obj}.remove()${2}

snippet     rema
prev_word   '^'
	${1:obj}.removeAttr('${2:attribute name}')${3}

snippet     remc
prev_word   '^'
	${1:obj}.removeClass('${2:class name}')${3}

snippet     remd
prev_word   '^'
	${1:obj}.removeData('${2:key name}')${3}

snippet     remdd
prev_word   '^'
	$.removeData(${1:element}${2:, 'key name}')${3}

snippet     remp
prev_word   '^'
	${1:obj}.removeProp('${2:property name}')${3}

snippet     repa
prev_word   '^'
	${1:obj}.replaceAll(${2:target})${3}

snippet     repw
prev_word   '^'
	${1:obj}.replaceWith(${2:content})${3}

snippet     reset
prev_word   '^'
	${1:obj}.reset(function (${2:e}) {
		${3:// event handler}
	});

snippet     resize
prev_word   '^'
	${1:obj}.resize(function (${2:e}) {
		${3:// event handler}
	});

snippet     scroll
prev_word   '^'
	${1:obj}.scroll(function (${2:e}) {
		${3:// event handler}
	});

snippet     scrolll
prev_word   '^'
	${1:obj}.scrollLeft(${2:value})${3}

snippet     scrollt
prev_word   '^'
	${1:obj}.scrollTop(${2:value})${3}

snippet     sdown
prev_word   '^'
	${1:obj}.slideDown('${2:slow/400/fast}')${3}

snippet     sdownc
prev_word   '^'
	${1:obj}.slideDown('${2:slow/400/fast}', function () {
		${3:// callback};
	});

snippet     select
prev_word   '^'
	${1:obj}.select(function (${2:e}) {
		${3:// event handler}
	});

snippet     serialize
prev_word   '^'
	${1:obj}.serialize()${2}

snippet     serializea
prev_word   '^'
	${1:obj}.serializeArray()${2}

snippet     show
prev_word   '^'
	${1:obj}.show('${2:slow/400/fast}')${3}

snippet     showc
prev_word   '^'
	${1:obj}.show('${2:slow/400/fast}', function () {
		${3:// callback}
	});

snippet     sib
prev_word   '^'
	${1:obj}.siblings('${2:selector expression}')${3}

snippet     size
prev_word   '^'
	${1:obj}.size()${2}

snippet     slice
prev_word   '^'
	${1:obj}.slice(${2:start}${3:, end})${4}

snippet     stoggle
prev_word   '^'
	${1:obj}.slideToggle('${2:slow/400/fast}')${3}

snippet     stop
prev_word   '^'
	${1:obj}.stop('${2:queue}', ${3:false}, ${4:false})${5}

snippet     submit
prev_word   '^'
	${1:obj}.submit(function (${2:e}) {
		${3:// event handler}
	});

snippet     sup
prev_word   '^'
	${1:obj}.slideUp('${2:slow/400/fast}')${3}

snippet     supc
prev_word   '^'
	${1:obj}.slideUp('${2:slow/400/fast}', function () {
		${3:// callback};
	});

snippet     text
prev_word   '^'
	${1:obj}.text(${2:'some text'})${3}

snippet     this
prev_word   '^'
	$(this)${1}

snippet     toarr
prev_word   '^'
	${1:obj}.toArray()

snippet     tog
prev_word   '^'
	${1:obj}.toggle(function (${2:e}) {
		${3:// event handler}
	}, function ($2) {
		${4:// event handler}
	});
	${4}

snippet     togclass
prev_word   '^'
	${1:obj}.toggleClass('${2:class name}')${3}

snippet     togsh
prev_word   '^'
	${1:obj}.toggle('${2:slow/400/fast}')${3}

snippet     trig
prev_word   '^'
	${1:obj}.trigger('${2:event name}')${3}

snippet     trigh
prev_word   '^'
	${1:obj}.triggerHandler('${2:event name}')${3}

snippet     $trim
prev_word   '^'
	$.trim(${1:str})${2}

snippet     $type
prev_word   '^'
	$.type(${1:obj})${2}

snippet     unbind
prev_word   '^'
	${1:obj}.unbind('${2:event name}')${3}

snippet     undele
prev_word   '^'
	${1:obj}.undelegate(${2:selector expression}, ${3:event}, ${4:handler})${5}

snippet     uniq
prev_word   '^'
	$.unique(${1:array})${2}

snippet     unload
prev_word   '^'
	${1:obj}.unload(function (${2:e}) {
		${3:// event handler}
	});

snippet     unwrap
prev_word   '^'
	${1:obj}.unwrap()${2}

snippet     val
prev_word   '^'
	${1:obj}.val('${2:text}')${3}

snippet     width
prev_word   '^'
	${1:obj}.width(${2:integer})${3}

snippet     wrap
prev_word   '^'
	${1:obj}.wrap('${2:&lt;div class="extra-wrapper"&gt;&lt;/div&gt;}')${3}

